---
import { isExperience } from '@/types/cv';
import type { Experience, Education } from '@/types/cv';

interface Props {
	elements: (Experience | Education)[]
	colored: boolean
}

const { elements, colored } = Astro.props
---

<ul
	class='timeline timeline-snap-icon max-md:timeline-compact timeline-vertical'
>
	{
		elements.map((element, index) => (
			<li>
				<div class='timeline-middle'>
					<svg
						xmlns='http://www.w3.org/2000/svg'
						viewBox='0 0 20 20'
						fill='currentColor'
            class:list={[{ 'text-accent': colored }, 'h-5 w-5']}
					>
						<path
							fill-rule='evenodd'
							d='M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z'
							clip-rule='evenodd'
						/>
					</svg>
				</div>
				<div
					class={`${index - (1 % 2) ? 'timeline-start' : 'timeline-end'} mb-10 md:text-end`}
				>
					<time class='font-mono italic'>{element.time}</time>
					<div class='text-lg font-black'>
						{isExperience(element) ? element.title : element.degree}
					</div>
					{element.description ? (
						<div class='tooltip-container'>
							<div class='tooltip-trigger'>
								{isExperience(element) && element.companyLink ? (
									<a href={element.companyLink} target="_blank" rel="noopener noreferrer" class="company-link">
										{element.company}
									</a>
								) : !isExperience(element) && element.schoolLink ? (
									<a href={element.schoolLink} target="_blank" rel="noopener noreferrer" class="company-link">
										{element.school}
									</a>
								) : (
									isExperience(element) ? element.company : element.school
								)}
								<span class="tooltip-icon">💬</span>
							</div>
							<div class='tooltip-content markdown-content' data-markdown={element.description}></div>
						</div>
					) : (
						<div>
							{isExperience(element) && element.companyLink ? (
								<a href={element.companyLink} target="_blank" rel="noopener noreferrer" class="company-link">
									{element.company}
								</a>
							) : !isExperience(element) && element.schoolLink ? (
								<a href={element.schoolLink} target="_blank" rel="noopener noreferrer" class="company-link">
									{element.school}
								</a>
							) : (
								isExperience(element) ? element.company : element.school
							)}
						</div>
					)}
					{element.location && (
						<div>{element.location}</div>
					)}
				</div>
        <hr class:list={[{ 'bg-accent': colored }]} />
			</li>
		))
	}
</ul>

<style>
  .tooltip-container {
    position: relative;
    display: inline-block;
  }
  
  .tooltip-trigger {
    cursor: help;
  }
  
  .tooltip-icon {
    font-size: 0.8em;
    margin-left: 0.25rem;
    opacity: 0.8;
  }
  
  .tooltip-content {
    display: none;
    position: absolute;
    left: 100%;
    top: 0%;
    transform: translateY(-50%);
    background: rgb(73, 73, 73);
    color: white;
    padding: 1rem;
    border-radius: 0.5rem;
    font-size: 1rem;
    line-height: 1.2;
    z-index: 10;
    min-width: 250px;
    max-width: 500px;
    white-space: pre-line; /* 줄바꿈 지원 */
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    text-align: left; /* 왼쪽 정렬 */
  }
  
  .tooltip-content a {
    color: #0d9488;
    text-decoration: underline;
  }
  
  .tooltip-content a:hover {
    color: #0f766e;
  }
  
  .tooltip-container:hover .tooltip-content {
    display: block;
  }
  
  .company-link {
    color: #0d9488;
    text-decoration: none;
  }
  
  .company-link:hover {
    color: #0f766e;
  }
  
  /* 마크다운 스타일 */
  .markdown-content h1, .markdown-content h2, .markdown-content h3, .markdown-content h4, .markdown-content h5, .markdown-content h6 {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  
  .markdown-content h1 { font-size: 1.5rem; }
  .markdown-content h2 { font-size: 1.3rem; }
  .markdown-content h3 { font-size: 1.1rem; }
  
  .markdown-content p {
    margin-bottom: 0.5rem;
  }
  
  .markdown-content ul, .markdown-content ol {
    margin-left: 1.5rem;
    margin-bottom: 0.5rem;
  }
  
  .markdown-content li {
    margin-bottom: 0.25rem;
  }
  
  .markdown-content code {
    background-color: rgba(255, 255, 255, 0.1);
    padding: 0.1rem 0.3rem;
    border-radius: 0.2rem;
    font-family: monospace;
  }
  
  .markdown-content pre {
    background-color: rgba(255, 255, 255, 0.1);
    padding: 0.5rem;
    border-radius: 0.3rem;
    overflow-x: auto;
    margin-bottom: 0.5rem;
  }
  
  .markdown-content blockquote {
    border-left: 3px solid #0d9488;
    padding-left: 0.5rem;
    margin-left: 0;
    margin-bottom: 0.5rem;
    font-style: italic;
  }
  
  /* 모바일 화면에서 툴팁 위치 및 크기 조정 */
  @media (max-width: 768px) {
    .tooltip-content {
      left: 0;
      right: 0;
      top: auto;
      bottom: -10px;
      transform: none;
      min-width: 100%;
      max-width: 100%;
      font-size: 0.95rem;
      padding: 0.75rem;
      border-radius: 0.25rem;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
  }
</style>

<script>
  // 마크다운을 HTML로 변환하는 함수
  function markdownToHtml(markdown) {
    if (!markdown) return '';
    
    // 줄바꿈 처리
    let html = markdown.replace(/\n/g, '<br>');
    
    // 헤더 처리
    html = html.replace(/^# (.*$)/gm, '<h1>$1</h1>');
    html = html.replace(/^## (.*$)/gm, '<h2>$1</h2>');
    html = html.replace(/^### (.*$)/gm, '<h3>$1</h3>');
    
    // 굵은 텍스트
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    
    // 기울임 텍스트
    html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
    
    // 코드 블록
    html = html.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
    
    // 인라인 코드
    html = html.replace(/`(.*?)`/g, '<code>$1</code>');
    
    // 링크
    html = html.replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');
    
    // 목록 처리 (간단한 구현)
    html = html.replace(/^\s*[-*+]\s+(.*$)/gm, '<li>$1</li>');
    html = html.replace(/<li>(.*?)<\/li>/g, '<ul><li>$1</li></ul>');
    
    // 인용구
    html = html.replace(/^\s*>\s+(.*$)/gm, '<blockquote>$1</blockquote>');
    
    return html;
  }
  
  // 페이지 로드 시 마크다운 변환
  document.addEventListener('DOMContentLoaded', () => {
    const tooltipContents = document.querySelectorAll('.markdown-content');
    
    tooltipContents.forEach(content => {
      const markdown = content.getAttribute('data-markdown');
      if (markdown) {
        content.innerHTML = markdownToHtml(markdown);
      }
    });
    
    // 링크에 target="_blank" 속성 추가
    const tooltipLinks = document.querySelectorAll('.tooltip-content a');
    tooltipLinks.forEach(link => {
      link.setAttribute('target', '_blank');
      link.setAttribute('rel', 'noopener noreferrer');
    });
  });
</script>
