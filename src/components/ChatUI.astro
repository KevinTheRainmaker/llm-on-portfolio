---
// Gemini API 키는 환경 변수에서 가져옵니다
const API_KEY = import.meta.env.PUBLIC_GEMINI_API_KEY || "";
---

<div class="chat-container">
  <div class="p-3 border-b border-base-300">
    <div class="flex items-center justify-between">
      <button id="toggle-chat" class="p-1 hover:bg-base-200 rounded">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
      <h3 class="font-bold text-lg">Discover with My Digital Twin</h3>
      <button id="reset-chat" class="p-1 hover:bg-base-200 rounded" title="Clear chat history">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
        </svg>
      </button>
    </div>
    <p class="text-sm text-gray-500 mt-1 text-center">Answers may not always be accurate. Please verify if needed.</p>
  </div>
  <div id="chat-content" class="flex flex-col flex-1 overflow-hidden">
    <div id="chat-messages" class="chat-messages flex-1 overflow-y-auto mb-4 space-y-4">
      <div class="chat-message assistant">
        <p class="font-bold">Hello! My name is Kangbeen Ko.<br>Ask anything about me!</p>
      </div>
      <!-- 메시지들이 여기에 표시됩니다 -->
    </div>
    <div class="chat-input-container border-t border-base-300 pt-4 mt-auto">
      <form id="chat-form" class="flex gap-1">
        <input
          type="text"
          id="user-input"
          placeholder="Type your message here..."
          class="input input-bordered flex-1"
        />
        <button
          type="submit"
          class="btn btn-primary"
        >
          Send
        </button>
      </form>
    </div>
  </div>
</div>

<!-- API 키를 메타 태그로 추가 -->
<meta name="gemini-api-key" content={API_KEY} />

<style>
  /* 전역 애니메이션 스타일 */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes typing {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-0.5rem); }
  }
  
  /* 기존 스타일은 유지 */
  .chat-container {
    max-width: 100%;
    margin: 0 auto;
    transition: all 0.3s ease-in-out;
    display: flex;
    flex-direction: column;
    height: 350px; /* 이전 값으로 복원 */
    border: 1px solid var(--border-color, hsl(var(--b3)));
    border-radius: 0.5rem;
    overflow: hidden;
    background-color: var(--bg-color, hsl(var(--b1)));
  }
  
  #chat-content {
    transition: all 0.3s ease-in-out;
    opacity: 1;
    display: flex;
    flex-direction: column;
    flex: 1;
    overflow: hidden; /* 중요: 내부 스크롤만 허용하고 외부 스크롤은 방지 */
  }
  
  #chat-content.collapsed {
    opacity: 0;
    pointer-events: none;
    max-height: 0;
    margin: 0;
    padding: 0;
    overflow: hidden;
  }
  
  .chat-container.collapsed {
    height: auto;
    padding-bottom: 0.5rem;
  }
  
  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding-right: 0.5rem; /* 스크롤바 공간 확보 */
  }
  
  .chat-input-container {
    position: sticky;
    bottom: 0;
    background-color: transparent;
    z-index: 10;
    padding-top: 0.5rem;
  }
  
  @media (max-width: 1024px) {
    #toggle-chat svg {
      transform: rotate(-90deg);
      transition: transform 0.3s ease-in-out;
    }
  }
  
  /* 채팅 메시지 기본 스타일 */
  .chat-message {
    animation: fadeIn 0.3s ease-in-out !important;
    position: relative !important;
    max-width: 80% !important;
    width: fit-content !important; /* 메시지 크기에 맞게 너비 조절 */
    margin-bottom: 1rem !important;
    padding: 0.75rem 1rem !important;
    border-radius: 1rem !important;
  }
  
  /* 사용자 메시지 스타일 - 연보라색 버블, 오른쪽 정렬 */
  .chat-message.user {
    background-color: rgba(147, 112, 219, 0.2) !important; /* 연보라색 */
    margin-left: auto !important;
    border-radius: 1rem 1rem 0 1rem !important;
    text-align: right !important;
  }
  
  /* 어시스턴트 메시지 스타일 - 연파란색 버블, 왼쪽 정렬 */
  .chat-message.assistant {
    background-color: rgba(135, 206, 235, 0.2) !important; /* 연파란색 */
    margin-right: auto !important;
    border-radius: 1rem 1rem 1rem 0 !important;
    text-align: left !important;
  }
  
  /* 말풍선 꼬리 스타일 */
  .chat-message::before {
    content: '' !important;
    position: absolute !important;
    width: 0 !important;
    height: 0 !important;
    border-style: solid !important;
  }
  
  /* 사용자 메시지 말풍선 꼬리 */
  .chat-message.user::before {
    right: -0.5rem !important;
    bottom: 0 !important;
    border-width: 0.5rem 0 0.5rem 0.5rem !important;
    border-color: transparent transparent transparent rgba(147, 112, 219, 0.2) !important; /* 연보라색 */
  }
  
  /* 어시스턴트 메시지 말풍선 꼬리 */
  .chat-message.assistant::before {
    left: -0.5rem !important;
    bottom: 0 !important;
    border-width: 0.5rem 0.5rem 0.5rem 0 !important;
    border-color: transparent rgba(135, 206, 235, 0.2) transparent transparent !important; /* 연파란색 */
  }
  
  /* 타이핑 표시기 스타일 */
  .typing-indicator {
    display: flex !important;
    align-items: center !important;
    gap: 0.5rem !important;
    padding: 0.5rem !important;
    background-color: rgba(135, 206, 235, 0.2) !important; /* 연파란색 */
    border-radius: 1rem 1rem 1rem 0 !important;
    margin-right: auto !important;
    max-width: 80% !important;
    width: fit-content !important; /* 메시지 크기에 맞게 너비 조절 */
    position: relative !important;
  }
  
  /* 타이핑 표시기 말풍선 꼬리 */
  .typing-indicator::before {
    content: '' !important;
    position: absolute !important;
    left: -0.5rem !important;
    bottom: 0 !important;
    border-width: 0.5rem 0.5rem 0.5rem 0 !important;
    border-style: solid !important;
    border-color: transparent rgba(135, 206, 235, 0.2) transparent transparent !important; /* 연파란색 */
  }
  
  /* 타이핑 표시기 점 스타일 */
  .typing-indicator span {
    width: 0.5rem !important;
    height: 0.5rem !important;
    background-color: currentColor !important;
    border-radius: 50% !important;
    animation: typing 1s infinite !important;
  }
  
  /* 타이핑 표시기 점 애니메이션 지연 */
  .typing-indicator span:nth-child(2) {
    animation-delay: 0.2s !important;
  }
  
  .typing-indicator span:nth-child(3) {
    animation-delay: 0.4s !important;
  }
</style>

<script>
  // 페이지 전환 간에 유지될 변수들을 전역 범위에 설정
  if (typeof window !== 'undefined') {
    // 이미 초기화된 전역 상태가 없으면 생성
    window.chatState = window.chatState || {
      initialized: false,
      history: [],
      isServerConnected: true,
      reconnectAttempts: 0,
      sessionId: null // 세션 ID 추가
    };
  }
  
  // 페이지 로드 및 전환 시 채팅 상태 처리 함수
  function initChat() {
    const toggleButton = document.getElementById('toggle-chat');
    const chatContent = document.getElementById('chat-content');
    const chatContainer = document.querySelector('.chat-container');
    const chatForm = document.getElementById('chat-form');
    const userInput = document.getElementById('user-input');
    const chatMessages = document.getElementById('chat-messages');
    
    // 필수 요소가 없으면 실행 중단
    if (!toggleButton || !chatContent || !chatContainer || !chatForm || !userInput || !chatMessages) {
      console.error('채팅 UI 요소를 찾을 수 없습니다.');
      return;
    }
    
    // 상태 초기화
    console.log('채팅 UI 초기화 시작...');
    
    // 전역 상태에서 변수 참조
    let chatHistory = window.chatState.history;
    let isServerConnected = window.chatState.isServerConnected;
    let reconnectAttempts = window.chatState.reconnectAttempts;
    const maxReconnectAttempts = 5;
    const reconnectDelay = 3000; // 3초
    
    // 세션 관리
    const currentSessionId = Date.now().toString();
    const previousSessionId = localStorage.getItem('chatSessionId');
    
    // 새 세션 시작 여부 확인
    const isNewSession = !previousSessionId || previousSessionId !== window.chatState.sessionId;
    
    // 새 세션이면 채팅 기록 초기화
    if (isNewSession) {
      console.log('새 세션 시작. 채팅 기록 초기화...');
      localStorage.setItem('chatSessionId', currentSessionId);
      window.chatState.sessionId = currentSessionId;
      
      // 채팅 기록 초기화
      chatHistory = [];
      window.chatState.history = [];
      localStorage.removeItem('chatHistory');
      
      // 채팅 메시지 영역 초기화
      chatMessages.innerHTML = '';
      
      // 웰컴 메시지 추가
      addMessage('Hello! My name is Kangbeen Ko.<br>Ask anything about me!', 'assistant');
    } else {
      console.log('기존 세션 계속...');
      
      // 로컬 스토리지에서 채팅 기록 불러오기
      try {
        const savedChatHistory = localStorage.getItem('chatHistory');
        if (savedChatHistory) {
          chatHistory = JSON.parse(savedChatHistory);
          window.chatState.history = chatHistory;
          
          // 메시지 콘텐츠가 이미 존재하는지 확인
          if (chatMessages.children.length <= 1) { // 웰컴 메시지만 있는 경우
            console.log('저장된 채팅 기록 복원 중...', chatHistory.length, '개의 메시지');
            
            // 채팅 메시지 영역 초기화 (웰컴 메시지 포함)
            chatMessages.innerHTML = '';
            
            // 웰컴 메시지 추가
            addMessage('Hello! My name is Kangbeen Ko.<br>Ask anything about me!', 'assistant');
            
            // 이전 대화 내역 복원
            chatHistory.forEach(message => {
              if (message.role === 'user' || message.role === 'model') {
                const role = message.role === 'model' ? 'assistant' : 'user';
                const text = message.parts[0].text;
                addMessage(text, role);
              }
            });
          } else {
            console.log('채팅 메시지가 이미 존재함. 복원 건너뜀.');
          }
        }
      } catch (error) {
        console.error('채팅 기록 불러오기 실패:', error);
      }
    }
    
    // WebSocket 연결 오류 처리
    const originalConsoleError = console.error;
    console.error = function(...args) {
      // WebSocket 연결 오류 메시지 필터링
      if (args.length > 0 && typeof args[0] === 'string' && 
          (args[0].includes('WebSocket connection') || 
           args[0].includes('server connection lost'))) {
        // 개발 환경에서만 로그 출력 (선택적)
        if (import.meta.env.DEV) {
          originalConsoleError.apply(console, ['[DEV]', ...args]);
        }
        return;
      }
      originalConsoleError.apply(console, args);
    };
    
    // 서버 연결 상태 확인 함수
    function checkServerConnection() {
      return new Promise((resolve) => {
        fetch('/api/health', { method: 'HEAD' })
          .then(() => {
            isServerConnected = true;
            window.chatState.isServerConnected = true;
            reconnectAttempts = 0;
            window.chatState.reconnectAttempts = 0;
            resolve(true);
          })
          .catch(() => {
            isServerConnected = false;
            window.chatState.isServerConnected = false;
            resolve(false);
          });
      });
    }
    
    // 서버 재연결 시도 함수
    async function attemptReconnect() {
      if (reconnectAttempts >= maxReconnectAttempts) {
        console.log('최대 재연결 시도 횟수에 도달했습니다. 오프라인 모드로 전환합니다.');
        addMessage('서버 연결이 끊어졌습니다. 오프라인 모드로 전환되었습니다.', 'assistant');
        return false;
      }
      
      reconnectAttempts++;
      window.chatState.reconnectAttempts = reconnectAttempts;
      console.log(`서버 재연결 시도 중... (${reconnectAttempts}/${maxReconnectAttempts})`);
      
      // 재연결 메시지 표시
      const reconnectMessage = addMessage(`서버 연결이 끊어졌습니다. 재연결 시도 중... (${reconnectAttempts}/${maxReconnectAttempts})`, 'assistant');
      
      // 일정 시간 후 재연결 시도
      await new Promise(resolve => setTimeout(resolve, reconnectDelay));
      
      const isConnected = await checkServerConnection();
      
      if (isConnected) {
        console.log('서버에 재연결되었습니다.');
        reconnectMessage.remove();
        addMessage('서버에 재연결되었습니다. 정상적으로 작동합니다.', 'assistant');
        return true;
      } else {
        reconnectMessage.remove();
        return await attemptReconnect();
      }
    }
    
    // 오프라인 응답 생성 함수
    function generateOfflineResponse(userMessage) {
      const offlineResponses = [
        "죄송합니다. 현재 서버에 연결할 수 없습니다. 오프라인 모드에서는 제한된 응답만 가능합니다.",
        "서버 연결이 끊어졌습니다. 나중에 다시 시도해주세요.",
        "오프라인 모드에서는 자세한 응답을 제공할 수 없습니다. 서버 연결이 복구되면 다시 시도해주세요.",
        "현재 서버와 통신할 수 없습니다. 기본적인 질문에만 답변할 수 있습니다.",
        "서버 연결 문제가 발생했습니다. 오프라인 모드에서는 제한된 기능만 사용 가능합니다."
      ];
      
      // 간단한 질문에 대한 오프라인 응답
      const simpleResponses = {
        "안녕": "안녕하세요! 현재 오프라인 모드입니다.",
        "이름": "제 이름은 Kangbeen Ko입니다. 현재 오프라인 모드입니다.",
        "소개": "저는 Kangbeen Ko입니다. 현재 오프라인 모드에서는 자세한 소개를 제공할 수 없습니다.",
        "도움": "현재 오프라인 모드입니다. 서버 연결이 복구되면 더 자세한 도움을 드릴 수 있습니다."
      };
      
      // 간단한 질문에 대한 응답 확인
      for (const [key, response] of Object.entries(simpleResponses)) {
        if (userMessage.includes(key)) {
          return response;
        }
      }
      
      // 기본 오프라인 응답 반환
      return offlineResponses[Math.floor(Math.random() * offlineResponses.length)];
    }
    
    // 접힘 상태 처리
    function setupChatToggle() {
      // 로컬 스토리지에서 접힘 상태 불러오기
      let isChatCollapsed = false;
      try {
        isChatCollapsed = localStorage.getItem('isChatCollapsed') === 'true';
        console.log('로드된 접힘 상태:', isChatCollapsed);
      } catch (error) {
        console.error('접힘 상태 불러오기 실패:', error);
      }
      
      // 모바일 환경에서는 기본적으로 접은 상태로 시작
      const isMobile = window.innerWidth <= 1024;
      
      // 초기 상태 설정
      if (isMobile) {
        console.log('채팅 UI 접기 적용 중...');
        chatContent.classList.add('collapsed');
        chatContainer.classList.add('collapsed');
        
        // 아이콘을 오른쪽 방향으로 설정
        const svg = toggleButton.querySelector('svg');
        if (svg) {
          svg.innerHTML = '<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />';
        }
      }
      
      // 이벤트 리스너 제거 후 재설정 (중요: 이벤트 리스너 중복 방지)
      toggleButton.removeEventListener('click', toggleChatHandler);
      toggleButton.addEventListener('click', toggleChatHandler);
      
      // 초기화 직후 한 번 더 토글 핸들러 등록 (지연 등록으로 초기 로드 시 누락 방지)
      setTimeout(() => {
        if (!toggleButton._hasToggleListener) {
          toggleButton.addEventListener('click', toggleChatHandler);
          toggleButton._hasToggleListener = true;
          console.log('토글 버튼 이벤트 리스너 지연 등록 완료');
        }
      }, 500);
      
      console.log('토글 버튼 이벤트 리스너 설정 완료');
    }
    
    // 토글 버튼 클릭 핸들러
    function toggleChatHandler(e) {
      console.log('토글 버튼 클릭됨', e);
      e.preventDefault(); // 이벤트 기본 동작 방지
      
      // 트랜지션을 위해 requestAnimationFrame 사용
      requestAnimationFrame(() => {
        chatContent.classList.toggle('collapsed');
        chatContainer.classList.toggle('collapsed');
        
        // 접힘 상태 저장
        const isCollapsed = chatContent.classList.contains('collapsed');
        localStorage.setItem('isChatCollapsed', isCollapsed.toString());
        console.log('접힘 상태 저장됨:', isCollapsed);
        
        // 버튼 아이콘 변경
        const svg = toggleButton.querySelector('svg');
        if (svg) {
          if (isCollapsed) {
            svg.innerHTML = '<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />';
          } else {
            svg.innerHTML = '<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />';
          }
        }
      });
    }
    
    // 채팅 폼 이벤트 설정
    function setupChatForm() {
      // 기존 이벤트 리스너 제거
      chatForm.removeEventListener('submit', handleChatSubmit);
      
      // 새 이벤트 리스너 추가
      chatForm.addEventListener('submit', handleChatSubmit);
      
      console.log('채팅 폼 이벤트 리스너 설정 완료');
    }
    
    // 채팅 폼 제출 핸들러
    async function handleChatSubmit(e) {
      e.preventDefault();
      
      const userMessage = userInput.value.trim();
      if (!userMessage) return;
      
      // 사용자 메시지 표시
      addMessage(userMessage, 'user');
      userInput.value = '';
      
      // 타이핑 표시기 추가
      const typingIndicator = addTypingIndicator();
      
      try {
        // 서버 연결 상태 확인
        if (!isServerConnected) {
          // 서버 재연결 시도
          const reconnected = await attemptReconnect();
          if (!reconnected) {
            // 재연결 실패 시 오프라인 응답 생성
            typingIndicator.remove();
            const offlineResponse = generateOfflineResponse(userMessage);
            addMessage(offlineResponse, 'assistant');
            return;
          }
        }
        
        // API 엔드포인트 호출
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message: userMessage,
            history: chatHistory,
          }),
        });
        
        // 타이핑 표시기 제거
        typingIndicator.remove();
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ error: '알 수 없는 오류가 발생했습니다.' }));
          throw new Error(errorData.error || 'API 요청 실패');
        }
        
        const data = await response.json();
        
        // 응답 메시지 표시
        addMessage(data.response, 'assistant');
        
        // 채팅 기록 업데이트
        const userHistoryMessage = { role: 'user', parts: [{ text: userMessage }] };
        const assistantHistoryMessage = { role: 'model', parts: [{ text: data.response }] };
        
        chatHistory.push(userHistoryMessage, assistantHistoryMessage);
        window.chatState.history = chatHistory;
        
        // 채팅 기록이 너무 길어지지 않도록 최대 50개 메시지로 제한
        if (chatHistory.length > 50) {
          chatHistory = chatHistory.slice(chatHistory.length - 50);
          window.chatState.history = chatHistory;
        }
        
        // 로컬 스토리지에 채팅 기록 저장
        try {
          localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
        } catch (error) {
          console.error('채팅 기록 저장 실패:', error);
          // 스토리지 용량 초과 등의 문제가 발생할 경우 이전 대화 기록 일부 삭제
          if (error instanceof DOMException && error.name === 'QuotaExceededError') {
            // 기록 절반으로 줄이기
            chatHistory = chatHistory.slice(Math.floor(chatHistory.length / 2));
            window.chatState.history = chatHistory;
            try {
              localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
            } catch (e) {
              console.error('채팅 기록 저장 재시도 실패:', e);
            }
          }
        }
        
      } catch (error) {
        console.error('채팅 오류:', error);
        typingIndicator.remove();
        
        // 서버 연결 상태 업데이트
        isServerConnected = false;
        window.chatState.isServerConnected = false;
        
        // 오프라인 응답 생성
        const offlineResponse = generateOfflineResponse(userMessage);
        addMessage(offlineResponse, 'assistant');
      }
    }
    
    // 메시지 추가 함수
    function addMessage(text, role) {
      // 디버깅을 위한 콘솔 로그
      console.log('Adding message:', text, 'with role:', role);
      
      // 메시지 요소 생성
      const messageDiv = document.createElement('div');
      
      // 클래스 추가 (순서 중요)
      messageDiv.classList.add('chat-message');
      messageDiv.classList.add(role);
      
      // 인라인 스타일 적용
      messageDiv.style.animation = 'fadeIn 0.3s ease-in-out';
      messageDiv.style.position = 'relative';
      messageDiv.style.maxWidth = '80%';
      messageDiv.style.width = 'fit-content'; // 메시지 크기에 맞게 너비 조절
      messageDiv.style.marginBottom = '1rem';
      messageDiv.style.padding = '0.75rem 1rem';
      messageDiv.style.borderRadius = '1rem';
      
      // 역할에 따른 스타일 적용
      if (role === 'user') {
        messageDiv.style.backgroundColor = 'rgba(147, 112, 219, 0.2)'; // 연보라색
        messageDiv.style.marginLeft = 'auto';
        messageDiv.style.marginRight = '0';
        messageDiv.style.borderRadius = '1rem 1rem 0 1rem';
        messageDiv.style.textAlign = 'right';
        
        // 말풍선 꼬리 추가
        const tail = document.createElement('div');
        tail.style.position = 'absolute';
        tail.style.right = '-0.5rem';
        tail.style.bottom = '0';
        tail.style.width = '0';
        tail.style.height = '0';
        tail.style.borderStyle = 'solid';
        tail.style.borderWidth = '0.5rem 0 0.5rem 0.5rem';
        tail.style.borderColor = 'transparent transparent transparent rgba(147, 112, 219, 0.2)';
        messageDiv.appendChild(tail);
      } else {
        messageDiv.style.backgroundColor = 'rgba(135, 206, 235, 0.2)'; // 연파란색
        messageDiv.style.marginLeft = '0';
        messageDiv.style.marginRight = 'auto';
        messageDiv.style.borderRadius = '1rem 1rem 1rem 0';
        messageDiv.style.textAlign = 'left';
        
        // 말풍선 꼬리 추가
        const tail = document.createElement('div');
        tail.style.position = 'absolute';
        tail.style.left = '-0.5rem';
        tail.style.bottom = '0';
        tail.style.width = '0';
        tail.style.height = '0';
        tail.style.borderStyle = 'solid';
        tail.style.borderWidth = '0.5rem 0.5rem 0.5rem 0';
        tail.style.borderColor = 'transparent rgba(135, 206, 235, 0.2) transparent transparent';
        messageDiv.appendChild(tail);
      }
      
      // 텍스트에 줄바꿈이 있는 경우 <br> 태그로 변환
      const formattedText = typeof text === 'string' ? text.replace(/\n/g, '<br>') : text;
      
      // 메시지 텍스트 설정
      messageDiv.innerHTML = `<p class="font-bold">${formattedText}</p>`;
      
      // 메시지 요소를 채팅 메시지 영역에 추가
      chatMessages.appendChild(messageDiv);
      
      // 스크롤을 맨 아래로 이동
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      // 디버깅을 위한 콘솔 로그
      console.log('Message element:', messageDiv);
      console.log('Message classes:', messageDiv.className);
      
      // 스타일이 제대로 적용되었는지 확인
      const computedStyle = window.getComputedStyle(messageDiv);
      console.log('Computed style:', {
        backgroundColor: computedStyle.backgroundColor,
        marginLeft: computedStyle.marginLeft,
        marginRight: computedStyle.marginRight,
        borderRadius: computedStyle.borderRadius,
        textAlign: computedStyle.textAlign,
        width: computedStyle.width
      });
      
      return messageDiv; // 메시지 요소 반환 (재연결 메시지 제거를 위해)
    }
    
    // 타이핑 표시기 추가 함수
    function addTypingIndicator() {
      const indicator = document.createElement('div');
      indicator.className = 'typing-indicator';
      
      // 인라인 스타일 적용
      indicator.style.display = 'flex';
      indicator.style.alignItems = 'center';
      indicator.style.gap = '0.5rem';
      indicator.style.padding = '0.5rem';
      indicator.style.backgroundColor = 'rgba(135, 206, 235, 0.2)';
      indicator.style.borderRadius = '1rem 1rem 1rem 0';
      indicator.style.marginRight = 'auto';
      indicator.style.maxWidth = '80%';
      indicator.style.width = 'fit-content'; // 메시지 크기에 맞게 너비 조절
      indicator.style.position = 'relative';
      
      // 말풍선 꼬리 추가
      const tail = document.createElement('div');
      tail.style.position = 'absolute';
      tail.style.left = '-0.5rem';
      tail.style.bottom = '0';
      tail.style.width = '0';
      tail.style.height = '0';
      tail.style.borderStyle = 'solid';
      tail.style.borderWidth = '0.5rem 0.5rem 0.5rem 0';
      tail.style.borderColor = 'transparent rgba(135, 206, 235, 0.2) transparent transparent';
      indicator.appendChild(tail);
      
      // 점 추가
      for (let i = 0; i < 3; i++) {
        const dot = document.createElement('span');
        dot.style.width = '0.5rem';
        dot.style.height = '0.5rem';
        dot.style.backgroundColor = 'currentColor';
        dot.style.borderRadius = '50%';
        dot.style.animation = 'typing 1s infinite';
        dot.style.animationDelay = `${i * 0.2}s`;
        indicator.appendChild(dot);
      }
      
      chatMessages.appendChild(indicator);
      
      // 스크롤을 맨 아래로 이동
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      return indicator;
    }
    
    // 리셋 버튼 이벤트 설정
    function setupResetButton() {
      const resetButton = document.getElementById('reset-chat');
      if (resetButton) {
        // 이미 리스너가 설정되어 있는지 확인하고 중복 등록 방지
        if (resetButton._hasResetListener) {
          console.log('리셋 버튼 이벤트 리스너가 이미 설정되어 있습니다.');
          return;
        }
        
        // 기존 이벤트 리스너 제거
        resetButton.removeEventListener('click', handleResetClick);
        
        // 새 이벤트 리스너 추가
        resetButton.addEventListener('click', handleResetClick);
        resetButton._hasResetListener = true;
        
        console.log('리셋 버튼 이벤트 리스너 설정 완료');
      }
    }
    
    // 리셋 버튼 클릭 핸들러
    function handleResetClick(e) {
      e.preventDefault(); // 버튼 기본 동작 방지
      console.log('리셋 버튼 클릭됨');
      
      if (confirm('정말 대화 내역을 모두 지우시겠습니까?')) {
        chatMessages.innerHTML = '';
        chatHistory = [];
        window.chatState.history = [];
        localStorage.removeItem('chatHistory');
        // 웰컴 메시지 추가
        addMessage('Hello! My Name is Kangbeen Ko. Ask anything about me!', 'assistant');
      }
    }
    
    // 페이지 로드(DOMContentLoaded) 시 서버 연결 상태 확인
    checkServerConnection().then(isConnected => {
      if (!isConnected) {
        addMessage('서버에 연결할 수 없습니다. 오프라인 모드로 전환되었습니다.', 'assistant');
      }
    });
    
    // 주기적으로 서버 연결 상태 확인
    const connectionCheckInterval = setInterval(async () => {
      if (!isServerConnected) {
        await checkServerConnection();
      }
    }, 30000); // 30초마다 확인
    
    // 모든 이벤트 리스너 설정
    setupChatToggle();
    setupChatForm();
    setupResetButton();
    
    console.log('채팅 UI 초기화 완료!');
    
    // 페이지 전환 시 인터벌 정리
    return function cleanup() {
      clearInterval(connectionCheckInterval);
    };
  }

  // 페이지 로드(DOMContentLoaded) 시 초기화
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOMContentLoaded 이벤트 발생');
    if (typeof initChat === 'function') {
      const cleanup = initChat();
      
      // 직접 토글 버튼 이벤트 등록 (추가 안전장치)
      const toggleButton = document.getElementById('toggle-chat');
      if (toggleButton && typeof toggleChatHandler === 'function' && !toggleButton._hasToggleListener) {
        toggleButton.addEventListener('click', toggleChatHandler);
        toggleButton._hasToggleListener = true;
        console.log('토글 버튼 이벤트 DOMContentLoaded에서 직접 등록');
      }
      
      // 직접 리셋 버튼 이벤트 등록 (추가 안전장치)
      const resetButton = document.getElementById('reset-chat');
      if (resetButton && typeof handleResetClick === 'function' && !resetButton._hasResetListener) {
        resetButton.addEventListener('click', handleResetClick);
        resetButton._hasResetListener = true;
        console.log('리셋 버튼 이벤트 DOMContentLoaded에서 직접 등록');
      }
      
      return cleanup;
    }
  });
  
  // Astro View Transitions API를 위한 페이지 로드 후 이벤트 핸들러
  document.addEventListener('astro:page-load', () => {
    console.log('astro:page-load 이벤트 발생');
    // 페이지 전환 후 채팅 상태 복원
    if (typeof initChat === 'function') {
      const cleanup = initChat();
      
      // 직접 토글 버튼 이벤트 등록 (추가 안전장치)
      const toggleButton = document.getElementById('toggle-chat');
      if (toggleButton && typeof toggleChatHandler === 'function' && !toggleButton._hasToggleListener) {
        toggleButton.addEventListener('click', toggleChatHandler);
        toggleButton._hasToggleListener = true;
        console.log('토글 버튼 이벤트 astro:page-load에서 직접 등록');
      }
      
      // 직접 리셋 버튼 이벤트 등록 (추가 안전장치)
      const resetButton = document.getElementById('reset-chat');
      if (resetButton && typeof handleResetClick === 'function' && !resetButton._hasResetListener) {
        resetButton.addEventListener('click', handleResetClick);
        resetButton._hasResetListener = true;
        console.log('리셋 버튼 이벤트 astro:page-load에서 직접 등록');
      }
      
      // 페이지 종료 시 정리 함수 등록
      if (typeof cleanup === 'function') {
        document.addEventListener('astro:before-preparation', cleanup, { once: true });
      }
    }
  });
  
  // 인라인 초기화 (스크립트 로드 직후 즉시 실행)
  if (typeof window !== 'undefined') {
    // 기존 초기화 과정 외에 추가로 실행
    console.log('인라인 초기화 시작');
    
    // DOM이 이미 로드된 상태라면 즉시 초기화
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(() => {
        // 토글 버튼 이벤트
        const toggleButton = document.getElementById('toggle-chat');
        if (toggleButton) {
          toggleButton.addEventListener('click', function(e) {
            console.log('인라인 등록된 토글 버튼 클릭 핸들러');
            const chatContent = document.getElementById('chat-content');
            const chatContainer = document.querySelector('.chat-container');
            
            if (chatContent && chatContainer) {
              chatContent.classList.toggle('collapsed');
              chatContainer.classList.toggle('collapsed');
              
              // 접힘 상태 저장
              const isCollapsed = chatContent.classList.contains('collapsed');
              try {
                localStorage.setItem('isChatCollapsed', isCollapsed.toString());
              } catch (err) {
                console.error('접힘 상태 저장 실패:', err);
              }
              
              // 버튼 아이콘 변경
              const svg = toggleButton.querySelector('svg');
              if (svg) {
                if (isCollapsed) {
                  svg.innerHTML = '<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />';
                } else {
                  svg.innerHTML = '<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />';
                }
              }
            }
          });
          console.log('인라인 토글 버튼 이벤트 리스너 설정 완료');
        }
        
        // 리셋 버튼 이벤트
        const resetButton = document.getElementById('reset-chat');
        if (resetButton && !resetButton._hasResetListener) {
          resetButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('인라인 등록된 리셋 버튼 클릭 핸들러');
            
            if (confirm('정말 대화 내역을 모두 지우시겠습니까?')) {
              const chatMessages = document.getElementById('chat-messages');
              if (chatMessages) {
                chatMessages.innerHTML = '';
                window.chatState = window.chatState || {};
                window.chatState.history = [];
                localStorage.removeItem('chatHistory');
                
                // 웰컴 메시지 추가
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('chat-message', 'assistant');
                messageDiv.innerHTML = '<p class="font-bold">Hello! My name is Kangbeen Ko.<br>Ask anything about me!</p>';
                chatMessages.appendChild(messageDiv);
              }
            }
          });
          resetButton._hasResetListener = true;
          console.log('인라인 리셋 버튼 이벤트 리스너 설정 완료');
        }
      }, 100);
    }
  }
</script> 